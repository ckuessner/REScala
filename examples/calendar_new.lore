type Calendar = AWSet[Appointment]
val work: Source[Calendar] = Source(AWSet())     
val vacation: Source[Calendar] = Source(AWSet()) 

val all_appointments: Derived[Set[Appointment]]   = Derived{ work.toSet.union(vacation.toSet) }    
val remaining_vacation: Derived[Int] = Derived{ 30 - vacation.toSet.map(_.days).sum } 

val add_appointment : Unit = Interaction[Calendar][Appointment] 
  .requires{ cal => a => get_start(a) < get_end(a) } 
  .executes{ cal => a => cal.add(a) } 
  .ensures { cal => a => a in cal.toSet } 
val add_vacation : Unit = add_appointment.modifies(vacation) 
val add_work     : Unit = add_appointment.modifies(work) 

UI.display(all_appointments, remaining_vacation) 
UI.vacationDialog.onConfirm{a => add_vacation.apply(a)} 