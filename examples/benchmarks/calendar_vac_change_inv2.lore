//> viperimport ../calendar/deps/calendar_header.vpr

type Calendar = AWSet[Appointment]
val work: Source[Calendar] = Source(AWSet())     
val vacation: Source[Calendar] = Source(AWSet()) 

val all_appointments: Derived[Set[Appointment]]   = Derived{ work.toSet.union(vacation.toSet) }    
val remaining_vacation: Derived[Int] = Derived{ 30 - sumDays(vacation.toSet) } 

val change_appointment: Unit = Interaction[Calendar][(Appointment, Appointment)]
  .requires{ cal => (oldApp, newApp) => get_start(newApp) < get_end(newApp) } 
  .requires{ cal => (oldApp, newApp) => oldApp in cal.toSet}
  .requires{ cal => (oldApp, newApp) => !(newApp in cal.toSet)}
  .executes{ cal => (oldApp, newApp) => cal.remove(oldApp).add(newApp)}
  .ensures{ cal => (oldApp, newApp) => newApp in cal.toSet}
  .ensures{ cal => (oldApp, newApp) => cal.toSet == old(cal.toSet.setminus(Set(oldApp)).union(Set(newApp)))}
  .ensures{ cal => (oldApp, newApp) => !(oldApp in cal.toSet)}
  .ensures{ cal => (oldApp, newApp) => size(cal.toSet) == old(size(cal.toSet))}
val change_vacation : Unit = change_appointment.modifies(vacation)

UI.display(all_appointments, remaining_vacation) 
UI.vacationDialog.onConfirm{a => add_vacation.apply(a)} 

invariant remaining_vacation >= 0