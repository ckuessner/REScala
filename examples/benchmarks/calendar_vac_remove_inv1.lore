//> viperimport ../calendar/deps/calendar_header.vpr

type Calendar = AWSet[Appointment]
val work: Source[Calendar] = Source(AWSet())     
val vacation: Source[Calendar] = Source(AWSet()) 

val all_appointments: Derived[Set[Appointment]]   = Derived{ work.toSet.union(vacation.toSet) }    
val remaining_vacation: Derived[Int] = Derived{ 30 - sumDays(vacation.toSet) } 

val remove_appointment: Unit = Interaction[Calendar][Appointment]
  .requires{ cal => a => a in cal.toSet}
  .executes{ cal => a => cal.remove(a)}
  .ensures{ cal => a => !(a in cal.toSet)}
  .ensures{ cal => a => cal.toSet == old(cal.toSet).setminus(Set(a))}
  .ensures{ cal => a => sumDays(cal.toSet) == old(sumDays(cal.toSet)) - sumDays(Set(a))}
val remove_vacation : Unit = remove_appointment.modifies(vacation)

UI.display(all_appointments, remaining_vacation) 
UI.vacationDialog.onConfirm{a => add_vacation.apply(a)} 

invariant forall a: Appointment ::
  a in all_appointments ==> get_start(a) < get_end(a)