reactive work: AWSet[Appointment] = Source(AWSet())
reactive vacation: AWSet[Appointment] = Source(AWSet())

reactive all_appointments = Derived {work.toSet.union(vacation.toSet)}

reactive remaining_vacation = Derived {30 - vacation.toSet.map(_.days).sum}

@transaction[work, vacation]
@requires get_start(appointment) < get_end(appointment)
@ensures a in toSet(c)
def add_appointment(c: Reactive, a: Appointment) = c.transform(_.add(a))

// @transaction[work, vacation]
// def remove_appointment(c: Reactive, a: Appointment) = c.transform(_.remove(a))

// @transaction[work, vacation]
// def change_time(c: Reactive, a: Appointment, start: Int, end: Ind) =
//     c.transform(_.remove(a).add(a.setStart(start).setSend(end)))