import "../tpc-c-header.vpr"

method delivery (
    // state of the db/graph:
    g: Ref,
    // transaction parameters:
    w_id: Id
) returns (
)    
requires readAll(g)
requires acc(g._newOrders, 1/2)
requires acc(g._orders, 1/2)
requires acc(g._orderLines, 1/2)
requires cc3(g)
requires cc5(g)
requires cc7(g)
ensures readAll(g)
ensures cc3(g)
ensures cc5(g)
ensures cc7(g)
{
    // iterate all districts of this warehouse
    var whDistricts : Set[District]
    whDistricts := getDistrictsByWID(toSet(g._districts), w_id)

    // ship newest order per district
    g._newOrders := updateNewOrders(whDistricts, g._orders, g._newOrders)
    // set carrier id in orders
    g._orders := updateOrders(g._orders, g._newOrders)
    // set delivery date
    g._orderLines := updateOrderLines(g._orderLines, g._orders)
}

function updateOrders( orders: AWSet[Order], newOrders: AWSet[NewOrder]): AWSet[Order]
    // carrier ids are updated accordingly
    ensures forall o: Order :: contains(result, o) ==>
        (is_new_order(toSet(newOrders), o) <==> get_o_c_id(o) == 0)
    ensures |toSet(orders)| == |toSet(result)|

function updateOrderLines(orderLines: AWSet[OrderLine], orders: AWSet[Order]): AWSet[OrderLine]
    ensures |toSet(orderLines)| == |toSet(result)|
    ensures forall ol: OrderLine, o: Order :: contains(result, ol) && get_ol_o_num(ol) == get_o_num(o) ==>
        (get_ol_del_date(ol) == 0 <==> get_o_c_id(o) == 0)

function updateNewOrders(districts: Set[District], orders: AWSet[Order], newOrders: AWSet[NewOrder]): AWSet[NewOrder]
    ensures forall d: District :: !(d in districts) ==> filterNewOrdersByDistrict(toSet(newOrders), get_d_id(d)) == filterNewOrdersByDistrict(toSet(result), get_d_id(d))
    ensures forall d: District :: d in districts ==> let d_id == (get_d_id(d)) in
        maxNOrderNum(toSet(result), d_id) == maxNOrderNum(toSet(newOrders), d_id) &&
        minNOrderNum(toSet(result), d_id) == minNOrderNum(toSet(newOrders), d_id) + 1 &&
        countNewOrders(toSet(result), d_id) == countNewOrders(toSet(newOrders), d_id) - 1

function removeOldestNewOrder(newOrders: AWSet[NewOrder], d_id: Id): AWSet[NewOrder]
    ensures forall id: Id :: id != d_id ==> filterNewOrdersByDistrict(toSet(newOrders),id)  == filterNewOrdersByDistrict(toSet(result),id)
    ensures maxNOrderNum(toSet(result), d_id) == maxNOrderNum(toSet(newOrders), d_id)
    ensures minNOrderNum(toSet(result), d_id) == minNOrderNum(toSet(newOrders), d_id) + 1
    ensures countNewOrders(toSet(result), d_id) == countNewOrders(toSet(newOrders), d_id) - 1

function updateCarrierId(orders: AWSet[Order]): AWSet[Order]
ensures toSet(orders) == toSet(result)

function get_districts_for_warehouse(districts: AWSet[District], w_id: Id): Seq[Id]
    ensures forall d: District :: contains(districts, d) && get_d_w_id(d) == w_id <==> get_d_id(d) in result