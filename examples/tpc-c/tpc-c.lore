type ID = Int

// graph definition
val warehouses: Source[AWSet[Warehouse]]  = Source(AWSet()) 
val districts: Source[AWSet[District]]    = Source(AWSet()) 
val customers: Source[AWSet[Customer]]    = Source(AWSet())
val orders: Source[AWSet[Order]]          = Source(AWSet())
val newOrders: Source[AWSet[NewOrder]]    = Source(AWSet())
val orderLines: Source[AWSet[OrderLine]]  = Source(AWSet())
val items: Source[AWSet[Item]]            = Source(AWSet())
val stocks: Source[AWSet[Stock]]          = Source(AWSet())
val paymentHistory: Source[AWSet[History]]     = Source(AWSet())

// fixme: before compiling to Viper, check which derived reactives are used in interactions and invariants
// val warehouseYTD: Derived[Map[Warehouse, YTD]] = Derived {
// 	districtsPerWarehouse(warehouses,districts)
// 	.map(d => districtYTD.get(d)).toMap()
// }
val districtYTD: Derived[Map[District, YTD]] = Derived{
	paymentsPerDistrict(districts,paymentHistory).map(sum).toMap()
}
val customerYTD: Derived[Map[Customer, YTD]] = Derived{
	paymentsPerCustomer(customers, paymentHistory).map(sum).toMap()
}
// val customerBalance: Derived[Map[Customer, Balance]] = Derived {
// 	sumOfOrdersPerCustomer(customers, oderLines).map((c, s) => customerYTD.get(c) - s).toMap()
// }
// val nextOrderId: Derived[Map[District, OrderID]] = Derived{
// 	highestOrderIDperDistrict(districts, oders).map(id => id + 1).toMap()
// }
val orderLineCount: Derived[Map[Order, Int]] = Derived{
	orderLinesPerOrder(orders, orderLines).map(length).toMap()
}

val delivery: Unit = Interaction[(AWSet[NewOrder], AWSet[Order], AWSet[OrderLine])][ID]
	.modifies(newOrders, orders, orderLines)
	.executes{
		(no, o, o) => w_id => {
			// get districts of this warehouse
			val whDistricts: Set[District] = getDistrictsByWID(toSet(districts), w_id)

			// ship newest order per district
			val newOrdersUpdated: AWSet[NewOrder] = updateNewOrders(whDistricts, o, no)

			// set carrier id in orders
			val ordersUpdated: AWSet[Order] = updateOrders(o, no)

			// set delivery date
			val orderLinesUpdated: AWSet[OrderLines]= updateOrderLines(ol, o)

			// return result tuple
			(newOrdersUpdated, ordersUpdated, orderLinesUpdated)
		}
	}
