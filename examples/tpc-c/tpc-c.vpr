// imports
import "deps/tpc-c-header.vpr"
// sources
field districts: AWSet[District]
field stocks: AWSet[Stock]
field orderLines: AWSet[OrderLine]
field items: AWSet[Item]
field newOrders: AWSet[NewOrder]
field warehouses: AWSet[Warehouse]
field orders: AWSet[Order]
field paymentHistory: AWSet[History]
field customers: AWSet[Customer]
// derived
define orderLineCount(orderLines, orders) toMap(map(orderLinesPerOrder(orders, orderLines), length))
define customerBalance(customers, paymentHistory) toMap(YTDMinusSum(customerYTD(customers, paymentHistory), sumOfOrdersPerCustomer(customers, oderLines)))
define customerYTD(customers, paymentHistory) toMap(map(paymentsPerCustomer(customers, paymentHistory), sum))
define warehouseYTD(districts, warehouses) toMap(mapDistrictYTD(districtsPerWarehouse(warehouses, districts)))
define nextOrderId(districts) toMap(mapPlusOne(highestOrderIDperDistrict(districts, oders)))
define districtYTD(districts, paymentHistory) toMap(map(paymentsPerDistrict(districts, paymentHistory), sum))
// invariants
define inv_1(districts, newOrders) forall d: District :: contains(districts, d) ==> (maxNOrderNum(toSet(newOrders), get_d_id(d)) - minNOrderNum(toSet(newOrders), get_d_id(d)) + 1 == countNewOrders(toSet(newOrders), get_d_id(d)))
define inv_2(newOrders, orders) forall o: Order :: contains(orders, o) ==> (get_o_c_id(o) == 0 <==> is_new_order(toSet(newOrders), o))
define inv_3(orderLines, orders) forall ol: OrderLine, o: Order :: contains(orders, o) && contains(orderLines, ol) && get_ol_o_num(ol) == get_o_num(o) ==> (get_ol_del_date(ol) == 0 <==> get_o_c_id(o) == 0)

// interactions
method payment (
  // graph
  graph: Ref,
  // arguments
  w_id: Id,
  d_id: Id,
  c_w_id: Id,
  c_d_id: Id,
  c_id: Id,
  c_last: Option[String],
  h_amount: Int,
  h_date: Timestamp
)
returns ()
// permissions
requires acc(graph.paymentHistory)
requires acc(graph.customers, 1/2)
requires acc(graph.warehouses, 1/2)
// preconditions
requires h_amount != 0
requires forall w1: Warehouse, w2: Warehouse :: contains(graph.warehouses, w1) && contains(graph.warehouses, w2) && get_w_id(w1) == get_w_id(w2) ==> w1 == w2
// relevant invariants

// permissions
ensures acc(graph.paymentHistory)
ensures acc(graph.customers, 1/2)
ensures acc(graph.warehouses, 1/2)
// postconditions
ensures old(toSet(graph.paymentHistory)) subset toSet(graph.paymentHistory)
// relevant invariants

{
  var customer: Customer
  customer := findCustomer(graph.customers, c_id, c_last)
  var realID: Id
  realID := getId(customer)
  var newHistory: History
  newHistory := new_history(realID, c_d_id, c_w_id, d_id, w_id, h_date, h_amount)
  graph.paymentHistory := add(graph.paymentHistory, newHistory)
  assert toSet(graph.paymentHistory) == old(toSet(graph.paymentHistory) union Set(newHistory))
} 

method new_order (
  // graph
  graph: Ref,
  // arguments
  w_id: Id,
  d_id: Id,
  c_id: Id,
  o_entry_d: Timestamp,
  i_ids: Seq[Option[Id]],
  i_w_ids: Seq[Id],
  i_qtys: Seq[Int]
)
returns ()
// permissions
requires acc(graph.districts)
requires acc(graph.newOrders)
requires acc(graph.orderLines)
requires acc(graph.orders)
requires acc(graph.customers, 1/2)
requires acc(graph.warehouses, 1/2)
// preconditions
requires forall w: Warehouse :: contains(graph.warehouses, w) ==> (get_w_ytd(w) == sumOfYtds(getDistrictsByWID(toSet(graph.districts), get_w_id(w))))
requires forall d: District :: contains(graph.districts, d) ==> (get_d_next_order_num(d) - 1 == maxOrderNum(toSet(graph.orders), get_d_id(d)) && get_d_next_order_num(d) - 1 == maxNOrderNum(toSet(graph.newOrders), get_d_id(d)))
requires forall d1: District, d2: District :: contains(graph.districts, d1) && contains(graph.districts, d2) && get_d_id(d1) == get_d_id(d2) ==> d1 == d2
requires forall o1: Order, o2: Order :: contains(graph.orders, o1) && contains(graph.orders, o2) && get_o_num(o1) == get_o_num(o2) ==> o1 == o2
requires forall n1: NewOrder, n2: NewOrder :: contains(graph.newOrders, n1) && contains(graph.newOrders, n2) && get_no_o_num(n1) == get_no_o_num(n2) ==> n1 == n2
// relevant invariants
requires inv_1(graph.districts, graph.newOrders)
requires inv_2(graph.newOrders, graph.orders)
requires inv_3(graph.orderLines, graph.orders)
// permissions
ensures acc(graph.districts)
ensures acc(graph.newOrders)
ensures acc(graph.orderLines)
ensures acc(graph.orders)
ensures acc(graph.customers, 1/2)
ensures acc(graph.warehouses, 1/2)
// postconditions
ensures forall d1: District, d2: District :: contains(graph.districts, d1) && contains(graph.districts, d2) && get_d_id(d1) == get_d_id(d2) ==> d1 == d2
ensures forall w: Warehouse :: contains(graph.warehouses, w) ==> (get_w_ytd(w) == sumOfYtds(getDistrictsByWID(toSet(graph.districts), get_w_id(w))))
ensures forall d: District :: contains(graph.districts, d) ==> (get_d_next_order_num(d) - 1 == maxOrderNum(toSet(graph.orders), get_d_id(d)) && get_d_next_order_num(d) - 1 == maxNOrderNum(toSet(graph.newOrders), get_d_id(d)))
// relevant invariants
ensures inv_1(graph.districts, graph.newOrders)
ensures inv_2(graph.newOrders, graph.orders)
ensures inv_3(graph.orderLines, graph.orders)
{
  var district: District
  district := getDistrict(graph.districts, d_id)
  var warehouse: Warehouse
  warehouse := getWarehouse(graph.warehouses, w_id)
  var customer: Customer
  customer := getCustomer(graph.customers, c_id)
  var nextOrderNum: Int
  nextOrderNum := get_d_next_order_num(district)
  var newOrderLines: Seq[OrderLine]
  newOrderLines := processOrderLines(nextOrderNum)
  assert forall d: District :: contains(graph.districts, d) ==> maxNOrderNum(toSet(graph.newOrders), get_d_id(d)) - minNOrderNum(toSet(graph.newOrders), get_d_id(d)) + 1 == countNewOrders(toSet(graph.newOrders), get_d_id(d))
  assert forall o: Order :: contains(graph.orders, o) && get_o_d_id(o) == d_id ==> get_o_num(o) != nextOrderNum
  var order_: Order
  order_ := genOrder(nextOrderNum, d_id, 0, graph.orders)
  var neworder: NewOrder
  neworder := genNewOrder(nextOrderNum, d_id)
  assert get_no_o_num(neworder) == get_o_num(order_)
  assert get_no_d_id(neworder) == d_id
  assume forall o: Order :: contains(old(graph.orders), o) ==> get_o_num(o) != get_no_o_num(neworder)
  var districts_temp: AWSet[District]
  districts_temp := remove(graph.districts, district)
  var district_: District
  district_ := new_district(get_d_id(district), get_d_w_id(district), get_d_next_order_num(district) + 1, get_d_tax_rate(district), get_d_ytd(district))
  graph.districts := add(districts_temp, district_)
  graph.newOrders := add(graph.newOrders, neworder)
  graph.orders := add(graph.orders, order_)
  graph.orderLines := addAll(graph.orderLines, newOrderLines)
  assert get_o_c_id(order_) == 0 <==> is_new_order(toSet(graph.newOrders), order_)
  assert contains(graph.newOrders, neworder)
  assert forall n: NewOrder :: contains(old(graph.newOrders), n) ==> contains(graph.newOrders, n)
  assert toSet(graph.newOrders) == toSet(old(graph.newOrders)) union Set(neworder)
  assert get_no_d_id(neworder) == d_id
  assert neworder in filterNewOrdersByDistrict(toSet(graph.newOrders), d_id)
  assert !(neworder in filterNewOrdersByDistrict(toSet(old(graph.newOrders)), d_id))
  assert filterNewOrdersByDistrict(toSet(graph.newOrders), d_id) == filterNewOrdersByDistrict(toSet(old(graph.newOrders)), d_id) union Set(neworder)
  assert |filterNewOrdersByDistrict(toSet(graph.newOrders), d_id)| == |filterNewOrdersByDistrict(toSet(old(graph.newOrders)), d_id)| + 1
  assert get_no_o_num(neworder) == nextOrderNum
  assert forall no: NewOrder :: no in filterNewOrdersByDistrict(toSet(old(graph.newOrders)), d_id) ==> nextOrderNum > get_no_o_num(no)
  assert minNOrderNum(toSet(graph.newOrders), d_id) == minNOrderNum(toSet(old(graph.newOrders)), d_id)
  assert countNewOrders(toSet(graph.newOrders), d_id) == countNewOrders(toSet(old(graph.newOrders)), d_id) + 1
  assert is_new_order(toSet(graph.newOrders), order_)
  assert get_o_c_id(order_) == 0 <==> is_new_order(toSet(graph.newOrders), order_)
  assert forall o: Order :: contains(old(graph.orders), o) ==> contains((graph.orders), o)
  assert forall o: Order :: old(contains(graph.orders, o)) ==> (get_o_c_id(o) == 0 <==> is_new_order(toSet(old(graph.newOrders)), o))
  assert forall o: Order :: contains(graph.orders, o) && contains(old(graph.orders), o) ==> (get_o_c_id(o) == old(get_o_c_id(o)))
  assert forall o: Order :: contains(graph.orders, o) && contains(old(graph.orders), o) ==> (is_new_order(toSet(graph.newOrders), o) == old(is_new_order(toSet(graph.newOrders), o)))
  assert forall o: Order :: o != order_ && contains(graph.orders, o) ==> (get_o_c_id(o) == 0 <==> is_new_order(toSet(graph.newOrders), o))
  assert toSet(graph.districts) == old(toSet(graph.districts)) setminus Set(district) union Set(district_)
  assert toSet(graph.newOrders) == old(toSet(graph.newOrders)) union Set(neworder)
  assert filterNewOrdersByDistrict(toSet(graph.newOrders), d_id) == old(filterNewOrdersByDistrict(toSet(graph.newOrders), d_id)) union Set(neworder)
  assert countNewOrders(toSet(graph.newOrders), d_id) == old(countNewOrders(toSet(graph.newOrders), d_id)) + 1
  assert minNOrderNum(toSet(graph.newOrders), d_id) == minNOrderNum(toSet(old(graph.newOrders)), d_id)
  assert maxNOrderNum(toSet(graph.newOrders), d_id) == old(maxNOrderNum(toSet(graph.newOrders), d_id)) + 1
  assert forall s1: Set[NewOrder], s2: Set[NewOrder], d: Id :: filterNewOrdersByDistrict(s1, d) == filterNewOrdersByDistrict(s2, d) ==> countNewOrders(s1, d) == countNewOrders(s2, d)
  assume forall id: Id :: sumOfYtds(getDistrictsByWID(toSet(graph.districts), id)) == sumOfYtds(getDistrictsByWID(old(toSet(graph.districts)), id))
  assert toSet(graph.orders) == toSet(old(graph.orders)) union Set(order_)
  assert forall o: Order :: old(o in toSet(graph.orders) && is_new_order(toSet(graph.newOrders), o)) ==> o in toSet(graph.orders) && is_new_order(toSet(graph.newOrders), o)
  assert forall o: Order :: contains(graph.orders, o) && contains(old(graph.orders), o) ==> (is_new_order(toSet(graph.newOrders), o) == old(is_new_order(toSet(graph.newOrders), o)))
  assert forall ol: OrderLine :: ol in newOrderLines ==> get_ol_del_date(ol) == 0
  assert get_o_c_id(order_) == 0
  assume forall ol: OrderLine :: ol in newOrderLines ==> !(exists o: Order :: contains(graph.orders, o) && get_o_num(o) == get_ol_o_num(ol))
  assume forall ol: OrderLine :: ol in toSet(old(graph.orderLines)) ==> get_ol_o_num(ol) != get_o_num(order_)
  assert toSet(graph.orderLines) == toSet(old(graph.orderLines)) union seqToSet(newOrderLines)
  assume forall ol: OrderLine :: contains(graph.orderLines, ol) && get_ol_o_num(ol) == get_o_num(order_) ==> ol in newOrderLines && !(ol in toSet(old(graph.orderLines)))
  assert forall ol: OrderLine :: contains(graph.orderLines, ol) && get_ol_o_num(ol) == get_o_num(order_) ==> get_ol_del_date(ol) == 0 <==> get_o_c_id(order_) == 0
  assert forall o: Order :: contains(graph.orders, o) && contains(old(graph.orders), o) ==> get_o_c_id(o) == old(get_o_c_id(o))
  assert forall ol: OrderLine, o: Order :: contains(old(graph.orders), o) && contains(old(graph.orderLines), ol) && get_ol_o_num(ol) == get_o_num(o) ==> (get_ol_del_date(ol) == 0 <==> get_o_c_id(o) == 0)
  assert forall ol: OrderLine, o: Order :: ol in (toSet(graph.orderLines) setminus seqToSet(newOrderLines)) && contains(old(graph.orders), o) && get_ol_o_num(ol) == get_o_num(o) && o != order_ ==> (get_ol_del_date(ol) == 0 <==> get_o_c_id(o) == 0)
} 

method delivery (
  // graph
  graph: Ref,
  // arguments
  w_id: Id
)
returns ()
// permissions
requires acc(graph.newOrders)
requires acc(graph.orderLines)
requires acc(graph.orders)
requires acc(graph.districts, 1/2)
// preconditions

// relevant invariants
requires inv_1(graph.districts, graph.newOrders)
requires inv_2(graph.newOrders, graph.orders)
requires inv_3(graph.orderLines, graph.orders)
// permissions
ensures acc(graph.newOrders)
ensures acc(graph.orderLines)
ensures acc(graph.orders)
ensures acc(graph.districts, 1/2)
// postconditions

// relevant invariants
ensures inv_1(graph.districts, graph.newOrders)
ensures inv_2(graph.newOrders, graph.orders)
ensures inv_3(graph.orderLines, graph.orders)
{
  var whDistricts: Set[District]
  whDistricts := getDistrictsByWID(toSet(graph.districts), w_id)
  graph.newOrders := shipNewOrders(whDistricts, graph.orders, graph.newOrders)
  graph.orders := setCarrierIds(graph.orders, graph.newOrders)
  graph.orderLines := setDeliveryDates(graph.orderLines, graph.orders)
} 

